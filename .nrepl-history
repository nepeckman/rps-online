app
(app)
(app nil)
page
(app "clicks")
(app #(true))
quit
r-app
quit
(rum-render-html app)
(rum/render-html app)
(rum/render-html page)
rum/render-html
(rum/render-html title)
title
(title
)
(rum/render-html (title))
(rum/render-html (page))
(rum/render-html (app))
(rum/render-html (r-app))
(require 'rps-online.core :reload)
(rum/render-html (page))
(require 'rps-online.core :reload)
(rum/render-html (page))
(require 'rps-online.core :reload)
(rum/render-html (page))
(require 'rps-online.core :reload)
(rum/render-html (page))
(str (rum/render-html (page)) js-files)
quit
(start-repl)
quit
hello
hello/app
(require 'rum.core :as rum)
(require 'rum.core)
(rum.core/render-html hello/app)
(rum.core/render-html (hello/app))
(hello/app)
(hello/app 1)
(hello/app 1 2)
(hello/app)
(hello/counter)
(hello/title)
quit
(def server (http/start-server app {:port 3000}))
(server)
(http/start-server app {:port 3000})
(http/stop-server server)
quit
(def server (http/run-server app {:port 3000}))
(server)
(def my-map {:port 1 :a 2})
(let [{:keys [port a]} my-map] (println port))
(let [{:keys [port a]} my-map] (println a))
(require 'rps-online.core :reload)
system-map
(def system (create-system))
(require 'rps-online.core :reload)
(def system (create-system))
(def system (create-system {:port 3000}))
(def system (system-map {:port 3000}))
(alter-var-root #'system component/start)
(alter-var-root #'system component/stop)
(require 'rps-online.core :reload)
(alter-var-root #'system component/start)
(alter-var-root #'system component/stop)
(require 'rps-online.core :reload)
(alter-var-root #'system component/start)
(alter-var-root #'system component/stop)
(require 'rps-online.core :reload)
(alter-var-root #'system component/start)
(require 'rps-online.core :reload)
(alter-var-root #'system component/stop)
(alter-var-root #'system component/start)
(require 'rps-online.core :reload)
(alter-var-root #'system component/stop)
(alter-var-root #'system component/start)
(hello-handler)
hello-handler
(require 'rps-online.core :reload)
(alter-var-root #'system component/stop)
(alter-var-root #'system component/start)
(alter-var-root #'system component/stop)
(require 'rps-online.core :reload)
(alter-var-root #'system component/start)
(routing/routes (routing/GET "/hello" [] "hello"))
(hello-handler)
(routing/GET "/hello" [] "hello")
(routing/routes (hello-handler))
(http/run-server (routing/routes (hello-handler)))
(http/run-server (routing/routes (hello-handler)) )
(http/run-server (routing/routes (hello-handler)) {:port 3000})
(alter-var-root #'system component/stop)
(require 'rps-online.core :reload)
(http/run-server (routing/routes (hello-handler)) {:port 3000})
(app)
quit
(def system (server-system))
(def system (server-system {:port 3000}))
(alter-root-var #'system component/start)
alter-root-var
(require 'rps-online.core :reload)
alter-root-var
(alter-var-root #'system component/start)
quit
(def system (server-system {:port 3000}))
(alter-var-root #'system component/start)
(require 'rps-online.core :reload)
(alter-var-root #'system component/start)
(require 'rps-online.core :reload)
(alter-var-root #'system component/start)
(require 'rps-online.core :reload)
(alter-var-root #'system component/start)
quit
(def system (server-system))
(def system (server-system {:port 3000}))
(alter-var-root #'system component/start)
(require 'rps-online.core :reload)
(def new-system (server-system {:port 3000}))
(alter-var-root #'system component/stop)
(alter-var-root #'new-system component/start)
(require 'rps-online.core :reload)
(def system (server-system {:port 3000}))
(alter-var-root #'system component/start)
(alter-var-root #'system component/stop)
(require 'rps-online.core :reload)
(def system (server-system {:port 3000}))
(alter-var-root #'system component/start)
quit
(def system (server-system {:port 3000}))
(alter-var-root #'system component/start)
quit
